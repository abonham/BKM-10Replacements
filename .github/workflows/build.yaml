name: PlatformIO CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: 
        envs: [pico-SH1106,pico-SSD1306,pico-SH1106-diagnostic,pico-SSD1306-diagnostic]
    steps:
    - name: Prepare variables
      id: variables
      run: |
        ARTIFACT_NAME="firmware-${{ matrix.envs }}"
        DISPLAY_NAME="${{ matrix.envs }}"
        echo ::set-output name=artifact-name::${ARTIFACT_NAME}
        echo ::set-output name=display-name::${DISPLAY_NAME}
    - uses: actions/checkout@v2
    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Cache PlatformIO
      uses: actions/cache@v2
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Set up Python
      uses: actions/setup-python@v2
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio
    - name: Run PlatformIO
      run: pio run --project-dir BKM-10Rp2040 -e ${{ matrix.envs }}
    - name: Rename artifacts
      run: |
        if [ ! -d  "build/artifacts" ]
        then
          mkdir -p build/artifacts
        fi
        if [ -f ./BKM-10Rp2040/.pio/build/${{ steps.variables.outputs.display-name }}/firmware.uf2 ]
        then
          cp ./BKM-10Rp2040/.pio/build/${{ steps.variables.outputs.display-name }}/firmware.uf2 "build/artifacts/${{ steps.variables.outputs.artifact-name }}.uf2"
        fi
    - name: Archive (${{ steps.variables.outputs.display-name }})
      uses: actions/upload-artifact@v2
      with:
        name: firmware
        path: build/artifacts